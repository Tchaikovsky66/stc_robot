#define _nop_() __asm nop __endasm

typedef unsigned char BYTE;
typedef unsigned int WORD;

#define ERROR 0
#define CMD_IDLE 0    // 空闲模式
#define CMD_READ 1    // IAP字节读命令
#define CMD_PROGRAM 2 // IAP字节编程命令
#define CMD_ERASE 3   // IAP扇区擦除命令

//-----------------------------------------------

// __sfr IAP_DATA = 0xC2;  // IAP数据寄存器
// __sfr IAP_ADDRH = 0xC3; // IAP地址寄存器高字节
// __sfr IAP_ADDRL = 0xC4; // IAP地址寄存器低字节
// __sfr IAP_CMD = 0xC5;   // IAP命令寄存器
// __sfr IAP_TRIG = 0xC6;  // IAP命令触发寄存器
// __sfr IAP_CONTR = 0xC7; // IAP控制寄存器

// #define ENABLE_IAP 0x80           //if SYSCLK<30MHz
// #define ENABLE_IAP 0x81           //if SYSCLK<24MHz
 #define ENABLE_IAP 0x82 // if SYSCLK<20MHz
//#define ENABLE_IAP 0x83           //if SYSCLK<12MHz
// #define ENABLE_IAP 0x84           //if SYSCLK<6MHz
// #define ENABLE_IAP 0x85           //if SYSCLK<3MHz
// #define ENABLE_IAP 0x86           //if SYSCLK<2MHz
// #define ENABLE_IAP 0x87           //if SYSCLK<1MHz

// 测试地址


// void IapIdle(void);
// BYTE IapReadByte(WORD addr);
// void IapProgramByte(WORD addr, BYTE dat);
// void IapEraseSector(WORD addr);
//BYTE 写数据进扇区(WORD begin_addr, WORD counter, BYTE array[]);
BYTE 从扇区中读取(WORD begin_addr, WORD counter, BYTE array[]);
//BYTE write_flash_with_protect_in_one_sector(WORD begin_addr, WORD counter, BYTE array[]);
BYTE sequential_write_flash_in_one_sector(WORD begin_addr, WORD counter, BYTE array[]);
BYTE IapReadByte(WORD addr);

// #define USED_BYTE_QTY_IN_ONE_SECTOR   1
// #define USED_BYTE_QTY_IN_ONE_SECTOR   2
// #define USED_BYTE_QTY_IN_ONE_SECTOR   4
// #define USED_BYTE_QTY_IN_ONE_SECTOR   8
// #define USED_BYTE_QTY_IN_ONE_SECTOR   16
// #define USED_BYTE_QTY_IN_ONE_SECTOR   32
// #define USED_BYTE_QTY_IN_ONE_SECTOR   64
//#define USED_BYTE_QTY_IN_ONE_SECTOR 128
#define USED_BYTE_QTY_IN_ONE_SECTOR   256
//#define USED_BYTE_QTY_IN_ONE_SECTOR   512

#define DEBUG_Data_Memory_Begin_Sector_addr 0x2600

    /* 测试常量数组 */
    // BYTE __code Test_array_total[512] =
    //     {
    //         0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    //         0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    //         0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
    //         0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
    //         0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
    //         0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
    //         0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
    //         0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
    //         0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
    //         0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
    //         0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
    //         0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
    //         0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
    //         0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
    //         0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
    //         0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
    //         0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0,
    //         0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0,
    //         0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0,
    //         0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0,
    //         0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0,
    //         0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0,
    //         0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90,
    //         0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80,
    //         0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70,
    //         0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60,
    //         0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50,
    //         0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40,
    //         0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x33, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
    //         0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
    //         0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
    //         0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00};

    // void main(void)
    // {
    //     P0M0 = 0x00;
    //     P0M1 = 0x00;
    //     P1M0 = 0x00;
    //     P1M1 = 0x00;
    //     P2M0 = 0x00;
    //     P2M1 = 0x00;
    //     P3M0 = 0x00;
    //     P3M1 = 0x00;
    //     P4M0 = 0x00;
    //     P4M1 = 0x00;
    //     P5M0 = 0x00;
    //     P5M1 = 0x00;
    //     P6M0 = 0x00;
    //     P6M1 = 0x00;
    //     P7M0 = 0x00;
    //     P7M1 = 0x00;

    //     //  if(sequential_write_flash_in_one_sector(DEBUG_Data_Memory_Begin_Sector_addr, USED_BYTE_QTY_IN_ONE_SECTOR, Test_array_total))
    //     //      display_OK_LED();
    //     //  else
    //     //      display_ERROR_LED();

    //     if (write_flash_with_protect_in_one_sector(DEBUG_Data_Memory_Begin_Sector_addr + 0x3, USED_BYTE_QTY_IN_ONE_SECTOR - 0x30, Test_array_total))
    //         display_OK_LED();
    //     else
    //         display_ERROR_LED();

    //     while (1)
    //         ;
    // }

// void EEPROM验证(void)
// {

//     unsigned char i;

//     // 1. 先读取数据并显示
//     if (从扇区中读取(0x0000, 10, CFGBUF) == ERROR)
//     {
//         // LED闪烁提示错误
//         P01 = !P01;
//         DelayMs(1000);
//         P01 = !P01;
//     }
//     DelayMs(2000);
//     // 2. 读取后立即验证数据
//     for (i = 0; i < 10; i++) // 只打印前10个字节作为示例
//     {
//         // 如果有串口，打印数据
//         Uart1_SendByte(CFGBUF[i]);
//         DelayMs(10);
//     }
//     DelayMs(2000);

//     // 3. 写入一些测试数据
//     for (i = 0; i < 10; i++)
//     {
//         CFGBUF[i] = i; // 写入特征数据，便于识别
//     }
//     DelayMs(2000);

//     // 4. 保存数据
//     // IapEraseSector(IAP_ADDRESS); // 先擦除
//     DelayMs(10); // 等待擦除完成

//     if (sequential_write_flash_in_one_sector(0x0000, 10, CFGBUF) == ERROR)
//     {
//         // LED闪烁提示错误
//         P04 = !P04;
//         DelayMs(200);
//         P04 = !P04;
//     }
//     DelayMs(2000);
//     Uart1_SendByte(IapReadByte(0x0000));
//     Uart1_SendByte(IapReadByte(0x0001));
//     Uart1_SendByte(IapReadByte(0x0002));
//     DelayMs(1000);
//     // 5. 立即读回验证
//     if (从扇区中读取(0x0000, 10, CFGBUF) == ERROR)
//     {
//         // LED闪烁提示错误
//         P06 = !P06;
//         DelayMs(300);
//         P06 = !P06;
//     }
//     DelayMs(2000);

//     // 6. 验证读回的数据
//     for (i = 0; i < 10; i++)
//     {
//         if (CFGBUF[i] != i) // 验证数据是否正确
//         {
//             Uart1_SendByte(CFGBUF[i]);
//             // LED快速闪烁提示数据错误
//             P10 = !P10;
//             DelayMs(100);
//             P10 = !P10;
//             DelayMs(100);
//         }
//     }
// }