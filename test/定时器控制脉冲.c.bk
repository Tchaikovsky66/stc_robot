#include <stdio.h>
#include <main.h>
#include "../../include/stc15.h"
int inter_num = 0;
// 在文件开头添加数组定义
const unsigned int 速度表[101] = {
    5,
    6,
    10,
    13,
    17,
    19,
    23,
    25,
    28,
    30,
    33,
    35,
    37,
    39,
    41,
    43,
    44,
    46,
    48,
    49,
    51,
    52,
    54,
    55,
    57,
    58,
    59,
    61,
    62,
    63,
    64,
    65,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    80,
    81,
    82,
    83,
    84,
    84,
    85,
    86,
    87,
    87,
    88,
    88,
    89,
    90,
    90,
    91,
    91,
    92,
    92,
    93,
    93,
    93,
    94,
    94,
    95,
    95,
    95,
    96,
    96,
    96,
    97,
    97,
    97,
    98,
    98,
    98,
    98,
    98,
    99,
    99,
    99,
    99,
    99,
    99,
    99,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
};

int 当前最大脉冲数 = 0;
unsigned int 脉冲总值 = 0;
volatile unsigned int 当前脉冲数 = 0;
volatile __bit x_flag = 0;

// 函数原型声明
// char y1_get(void);
// void go_test(void);

void PulseTest(unsigned int reload)
{
    AUXR |= 0x80;      // 定时器时钟1T模式
    TMOD &= 0xF0;      // 设置定时器模式
    TL0 = reload;      // 设置定时初始值低8位
    TH0 = reload >> 8; // 设置定时初始值高8位

    ET0 = 1; // 使能定时器0中断
    EA = 1;  // 开启总中断

    TR0 = 1; // 定时器0开始计时
}

void Timer0_Isr(void) __interrupt(1)
{
    if (x_flag) // 运行标志位
    {

        if (当前脉冲数 >= 当前最大脉冲数)
        {
            TR0 = 0; // 停止定时器
            TF0 = 0; // 清除溢出标志
            x_flag = 0;
            TR0 = 0; // 定时器0停止计时
        }
        P0_0 = !P0_0;
        inter_num++;
        if (inter_num == 2)
        {
            inter_num = 0;
            当前脉冲数++;
            if (当前最大脉冲数 < 0)
            {
                P0_1 = 1; // 反向
                当前最大脉冲数 = -当前最大脉冲数;
                脉冲总值--;
            }
            else
            {
                P0_1 = 0; // 正向
                脉冲总值++;
            }
        }
    }
}
void motor_go(int 距离, int 速度)
{
    P0_0 = 0;
    volatile unsigned int reload = 0;
    int 速度系数 = 速度 / 10; // 速度放大系数/10
    int 加速系数 = 20;
    int 加速总步数 = 加速系数 * 速度系数;
    int 总放大系数 = 加速系数 * 速度系数 / 100;
    当前最大脉冲数 = 距离 * 20;
    当前脉冲数 = 0; // 重置计数器
    x_flag = 1;
    int pulse_num_tmp = 0;

    int max_reload = 65535 - (unsigned int)(2763200 / ((速度表[100]) * 速度系数));
    max_reload = (reload > 60000) ? 60000 : max_reload;
    while (1) // 改为无限循环
    {
        if (!x_flag)
            break; // 检查标志位

        if (当前脉冲数 < 加速总步数)
        {
            P0_3 = 0;
            pulse_num_tmp = 当前脉冲数 / 总放大系数;
            reload = 65535 - (unsigned int)(2763200 / ((速度表[pulse_num_tmp]) * 速度系数));
            reload = (reload > 60000) ? 60000 : reload; // reload 不能大于60000 对应速度不小于5；
            TL0 = reload;
            TH0 = reload >> 8;
            P0_3 = 1;
        }
        else if (当前脉冲数 < 当前最大脉冲数 - 加速总步数)
        {
            P0_4 = 0;
            TL0 = max_reload;
            TH0 = max_reload >> 8;
            P0_4 = 1;
        }
        else
        {
            P0_3 = 0;
            pulse_num_tmp = 当前脉冲数 / (加速系数);
            reload = 65535 - (unsigned int)(2763200 / ((速度表[100 - (当前脉冲数 - 当前最大脉冲数 + 加速总步数) / 总放大系数]) * 速度系数));
            TL0 = reload;
            TH0 = reload >> 8;
            P0_3 = 1;
        }
        TR0 = 1; // 开启定时器
        P0_2 = !P0_2;
    }
}
/*
**************************************************
            main函数
**************************************************
*/
void go_left(void)
{
}
void main(void)
{
    // 35 36 37 推挽
    // P3M0 |= 0xe0;
    // P3M1 &= ~0xe0;
    int 距离 = 0;
    AUXR |= 0x80; // 定时器时钟1T模式
    TMOD &= 0xF0; // 设置定时器模式
    ET0 = 1;      // 使能定时器0中断
    EA = 1;       // 开启总中断
    while (1)
    {
        motor_go(400, 600);

        DelayMs(100);
    }
}
